# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum APILevel {
  ADVANCED
  BASIC
  MEDIUM
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Environment {
  _id: ObjectId!
  creator: User
  description: String
  logoUrl: String
  name: String!
  templates: [Template!]!
  url: String
}

type Framework {
  _id: ObjectId!
  creator: User!
  description: String
  languages: [Language!]!
  logoUrl: String
  name: String!
  templates: [Template!]!
  url: String
}

type GitRepository {
  _id: ObjectId!
  createdAt: DateTime!
  description: String
  forkCount: Float!
  githubId: String!
  isArchived: Boolean!
  isDisabled: Boolean!
  isFork: Boolean!
  isLocked: Boolean!
  isTemplate: Boolean!
  languages: [Language!]!
  name: String!
  nameWithOwner: String!
  owner: RepositoryOwner!
  primaryLanguage: Language
  starCount: Float!
  stargazers: [UserGitHub!]!
  template: Template
  updatedAt: DateTime!
  url: String!
}

type Language {
  _id: ObjectId!
  color: String
  frameworks: [Framework!]!
  libraries: [Library!]!
  name: String!
  primaryRepositories: [GitRepository!]!
  primaryTemplates: [Template!]!
  repositories: [GitRepository!]!
  templates: [Template!]!
}

type LanguageGitHub {
  color: String
  name: String!
}

type Library {
  _id: ObjectId!
  creator: User!
  description: String
  language: Language
  logoUrl: String
  name: String!
  templates: [Template!]!
  url: String
}

type Mutation {
  createEnvironment(description: String, logoUrl: String, name: String!, url: String): Environment!
  createFramework(description: String, languages: [ObjectId!]!, logoUrl: String, name: String!, url: String): Framework!
  createLibrary(description: String, language: ObjectId, logoUrl: String, name: String!, url: String): [Library!]!
  createTemplate(environments: [ObjectId!]!, frameworks: [ObjectId!]!, languages: [ObjectId!]!, libraries: [ObjectId!]!, name: String!, primaryLanguage: ObjectId, repositoryId: ObjectId!): Template!
  logout: Boolean!
  modifyPersonalAccessToken(token: String!): Boolean!
  removeEnvironment(id: String!): String!
  removeFramework(id: String!): String!
  removeLibrary(id: String!): String!
  removeTemplate(id: String!): String!
  searchRepository(input: String!): [RepositoryGitHub!]
  toggleUpvote(id: ObjectId!): Boolean!
  updateEnvironment(_id: ObjectId!, description: String, logoUrl: String, name: String!, url: String): Environment!
  updateFramework(_id: ObjectId!, description: String, languages: [ObjectId!]!, logoUrl: String, name: String!, url: String): Framework!
  updateLibrary(_id: ObjectId!, description: String, language: ObjectId, logoUrl: String, name: String!, url: String): Library!
  updateTemplate(_id: ObjectId!, environments: [ObjectId!]!, frameworks: [ObjectId!]!, languages: [ObjectId!]!, libraries: [ObjectId!]!, name: String!, primaryLanguage: ObjectId, repositoryId: ObjectId): Template!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Organization {
  _id: ObjectId!
  avatarUrl: String!
  description: String
  email: String
  login: String!
  members: [UserGitHub!]!
  name: String
  repositories: [GitRepository!]!
  url: String!
  websiteUrl: String
}

type OrganizationGitHub {
  avatarUrl: String!
  description: String
  email: String
  id: String!
  login: String!
  members: [UserGitHubAPI!]!
  name: String
  repositories(isTemplate: Boolean): [RepositoryGitHub!]!
  url: String!
  websiteUrl: String
}

type Query {
  checkAPILevel: APILevel!
  current_user: User
  environment(id: String!): Environment
  environments: [Environment!]!
  framework(id: String!): Framework
  frameworks: [Framework!]!
  gitRepo(id: String!): GitRepository
  gitRepositories: [GitRepository!]!
  languages: [Language!]!
  libraries: [Library!]!
  library(id: String!): Library
  organization(login: String!): OrganizationGitHub
  organizations: [Organization!]!
  repositoryOwner(id: String!): RepositoryOwnerGitHub
  repositoryOwnerDB(id: String!): RepositoryOwner
  repositoryOwners: [RepositoryOwner!]!
  searchLanguages(input: String!): [LanguageGitHub!]!
  template(name: String!, owner: String!): Template
  templateById(id: String!): Template
  templates: [Template!]!
  user(login: String!): UserGitHubAPI
  users: [User!]!
  usersGitHubDB: [UserGitHub!]!
  viewer: UserGitHubAPI!
}

type RepositoryGitHub {
  createdAt: DateTime!
  description: String!
  forkCount: Float!
  id: String!
  isArchived: Boolean!
  isDisabled: Boolean!
  isFork: Boolean!
  isLocked: Boolean!
  isTemplate: Boolean!
  languages: [LanguageGitHub!]!
  name: String!
  nameWithOwner: String!
  owner: RepositoryOwnerGitHub!
  primaryLanguage: LanguageGitHub
  starCount: Float!
  updatedAt: DateTime!
  url: String!
}

type RepositoryOwner {
  _id: ObjectId!
  avatarUrl: String!
  login: String!
  organization: Organization
  repositories: [GitRepository!]!
  url: String!
  user: UserGitHub
}

type RepositoryOwnerGitHub {
  avatarUrl: String!
  id: String!
  login: String!
  organization: OrganizationGitHub
  url: String!
  user: UserGitHubAPI
}

type Template {
  _id: ObjectId!
  environments: [Environment!]!
  frameworks: [Framework!]!
  languages: [Language!]!
  libraries: [Library!]!
  name: String!
  owner: User
  primaryLanguage: Language
  repository: GitRepository
  upvotes: [User!]!
  upvotesCount: Float!
}

type User {
  _id: ObjectId!
  admin: Boolean!
  APILevel: APILevel!
  data: UserGitHub!
  githubId: String!
  templates: [Template!]!
  upvotedTemplates: [Template!]!
}

type UserGitHub {
  _id: ObjectId!
  avatarUrl: String!
  bio: String
  email: String!
  login: String!
  name: String
  organizations: [Organization!]!
  repositories: [GitRepository!]!
  starredRepositories: [GitRepository!]!
  url: String!
}

type UserGitHubAPI {
  avatarUrl: String!
  bio: String
  email: String!
  id: String!
  login: String!
  name: String
  organizations: [OrganizationGitHub!]!
  repositories(isTemplate: Boolean): [RepositoryGitHub!]!
  starredRepositories(isTemplate: Boolean): [RepositoryGitHub!]!
  url: String!
}
