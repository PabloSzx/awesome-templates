# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

enum APILevel {
  BASIC
  MEDIUM
  ADVANCED
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Environment {
  id: ID!
  name: String!
  url: String
  logoUrl: String
  description: String
  templates: [Template!]!
  creator: User!
}

type Framework {
  id: ID!
  name: String!
  url: String
  logoUrl: String
  description: String
  languages: [Language!]!
  templates: [Template!]!
  creator: User!
}

type GitRepository {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isLocked: Boolean!
  isArchived: Boolean!
  isDisabled: Boolean!
  isFork: Boolean!
  isTemplate: Boolean!
  forkCount: Float!
  name: String!
  nameWithOwner: String!
  description: String
  url: String!
  primaryLanguage: Language
  owner: RepositoryOwner!
  languages: [Language!]!
  starCount: Float!
  stargazers: [UserGitHub!]!
  template: Template
}

type Language {
  name: String!
  color: String
  repositories: [GitRepository!]!
  primaryRepositories: [GitRepository!]!
  templates: [Template!]!
  primaryTemplates: [Template!]!
  frameworks: [Framework!]!
  libraries: [Library!]!
}

type LanguageGitHub {
  name: String!
  color: String
}

type Library {
  id: ID!
  name: String!
  url: String
  logoUrl: String
  description: String
  language: Language
  templates: [Template!]!
  creator: User!
}

type Mutation {
  logout: Boolean!
  modifyPersonalAccessToken(token: String!): Boolean!
  createEnvironment(name: String!, url: String, logoUrl: String, description: String): Environment!
  updateEnvironment(id: String!, name: String!, url: String, logoUrl: String, description: String): Environment!
  removeEnvironment(id: String!): String!
  createFramework(name: String!, url: String, logoUrl: String, description: String, languages: [String!]!): Framework!
  updateFramework(id: String!, name: String!, url: String, logoUrl: String, description: String, languages: [String!]!): Framework!
  removeFramework(id: String!): String!
  createLibrary(name: String!, url: String, logoUrl: String, description: String, language: String): [Library!]!
  updateLibrary(id: String!, name: String!, url: String, logoUrl: String, description: String, language: String): Library!
  removeLibrary(id: String!): String!
  createTemplate(name: String!, repositoryId: String!, primaryLanguage: String, languages: [String!]!, frameworks: [String!]!, libraries: [String!]!, environments: [String!]!): Template!
  updateTemplate(templateId: String!, name: String!, repositoryId: String, primaryLanguage: String, languages: [String!]!, frameworks: [String!]!, libraries: [String!]!, environments: [String!]!): Template!
  removeTemplate(id: String!): String!
  searchRepository(input: String!): [RepositoryGitHub!]
}

type Organization {
  id: ID!
  avatarUrl: String!
  login: String!
  url: String!
  email: String
  name: String
  description: String
  websiteUrl: String
  members: [UserGitHub!]!
  repositories: [GitRepository!]!
}

type OrganizationGitHub {
  id: String!
  avatarUrl: String!
  login: String!
  url: String!
  email: String
  name: String
  description: String
  websiteUrl: String
  members: [UserGitHubAPI!]!
  repositories(isTemplate: Boolean): [RepositoryGitHub!]!
}

type Query {
  current_user: User
  checkAPILevel: APILevel!
  environments: [Environment!]!
  environment(id: String!): Environment
  frameworks: [Framework!]!
  framework(id: String!): Framework
  gitRepositories: [GitRepository!]!
  gitRepo(id: String!): GitRepository
  languages: [Language!]!
  libraries: [Library!]!
  library(id: String!): Library
  organizations: [Organization!]!
  repositoryOwners: [RepositoryOwner!]!
  repositoryOwnerDB(id: String!): RepositoryOwner
  templates: [Template!]!
  template(owner: String!, name: String!): Template
  templateById(id: String!): Template
  users: [User!]!
  usersGitHubDB: [UserGitHub!]!
  searchLanguages(input: String!): [LanguageGitHub!]!
  organization(login: String!): OrganizationGitHub
  repositoryOwner(id: String!): RepositoryOwnerGitHub
  viewer: UserGitHubAPI!
  user(login: String!): UserGitHubAPI
}

type RepositoryGitHub {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  isLocked: Boolean!
  isArchived: Boolean!
  isDisabled: Boolean!
  isFork: Boolean!
  isTemplate: Boolean!
  forkCount: Float!
  name: String!
  nameWithOwner: String!
  description: String!
  url: String!
  primaryLanguage: LanguageGitHub
  owner: RepositoryOwnerGitHub!
  languages: [LanguageGitHub!]!
  starCount: Float!
}

type RepositoryOwner {
  id: ID!
  avatarUrl: String!
  login: String!
  url: String!
  user: UserGitHub
  organization: Organization
  repositories: [GitRepository!]!
}

type RepositoryOwnerGitHub {
  id: String!
  avatarUrl: String!
  login: String!
  url: String!
  user: UserGitHubAPI
  organization: OrganizationGitHub
}

type Template {
  id: ID!
  name: String!
  owner: User!
  upvotes: [User!]!
  upvotesCount: Float!
  repository: GitRepository!
  languages: [Language!]!
  primaryLanguage: Language
  libraries: [Library!]!
  environments: [Environment!]!
  frameworks: [Framework!]!
}

type User {
  id: ID!
  admin: Boolean!
  APILevel: APILevel!
  templates: [Template!]!
  upvotedTemplates: [Template!]!
  data: UserGitHub!
}

type UserGitHub {
  id: ID!
  avatarUrl: String!
  login: String!
  url: String!
  email: String!
  name: String
  bio: String
  repositories: [GitRepository!]!
  starredRepositories: [GitRepository!]!
  organizations: [Organization!]!
}

type UserGitHubAPI {
  id: String!
  avatarUrl: String!
  login: String!
  url: String!
  email: String!
  name: String
  bio: String
  repositories(isTemplate: Boolean): [RepositoryGitHub!]!
  starredRepositories(isTemplate: Boolean): [RepositoryGitHub!]!
  organizations: [OrganizationGitHub!]!
}
